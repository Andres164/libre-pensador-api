nextSubPeriodStartDate = GetSubstractionOfDate(subPeriodDuration, request.PeriodEnd)
currentSubPeriodIndex = 0

currentReceipt = receipts.begin
while(currentReceipt < receipts.end)
 if(currentReceipt.Date <= nextSubPeriodStartDate)
 {
    nextSubPeriodStartDate = GetSubstractionOfDate(subPeriodDuration, nextSubPeriodStartDate)
    profitPerSubPeriod.Add(new ProfitOfPeriod)
    currentSubPeriodIndex++
 }
 else
 {
    AddReceiptToProfitOfPeriod(ref periodsIncome[currentSubPeriodIndex], currentReceipt)
    currentReceipt++
 }




GetSubstractionOfDate(date, timeLapsToSubstract)

return timeLapsToSubstract switch
{
   Day => date.AddDays(-1)
   Month => date.AddMonths(-1)
   Year => date.AddYears(-1)
   _ => throw new ArgumentException("The given TimeLaps is not valid")
}



AddReceiptToProfitOfPeriod(ref profitOfPereiod, receipt)

 





 
 
